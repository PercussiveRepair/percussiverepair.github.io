{"name":"Percussiverepair.github.io","tagline":"Come and have a go, if you think you're nerd enough.","body":"### Saltstack Monitoring\r\n*19th Feb 2014*\r\n\r\nI [spoke recently](https://www.youtube.com/watch?v=IWvZgdLyfaI&noredirect=1) at the Februrary London DevOps meetup about my adventures with solo DevOps and the SaltStack config management system ( [Slides](http://goo.gl/FxS6pp) )\r\n\r\nOne of the other talks at the meetup, [Stop Using Nagios](https://www.youtube.com/watch?v=Q9BagdHGopg) by Andy Sykes from Forward3D ([@supersheep](https://twitter.com/supersheep)) got me thinking about using Salt as the core component of a distributed monitoring system. I believe it fits the mould very well:\r\n* It has an established, secure and most importantly, fast, master-minion setup \r\n* It has built in scheduling capability both for the master and separately for the minions.\r\n* It already has built in support for piping whatever comes back from your minion status checks into graphite, mysql/postgres/sqlite, cassandra/mongo/redis/couch, etc in its [Returners](https://salt.readthedocs.org/en/latest/ref/returners/index.html)\r\n* It can act on event on the minions using it's [events](https://salt.readthedocs.org/en/latest/topics/event/index.html) and [reactor](https://salt.readthedocs.org/en/latest/topics/reactor/index.html) systems\r\n\r\nI've started doing some testing of my own on this, but I'd be very interested in feedback. jay (at) percussiverepair.net\r\n\r\n\r\n### CWGraphs for AWS Instances\r\n*13th Jan 2014*\r\n\r\nFor some time I've been using [Cloudwatch](http://aws.amazon.com/cloudwatch/) as a supplement to my other graphing and monitoring packages, but I finally got tired of the poor UI and lack of customisation. I had seen and tested some other GitHub releases that seemed like they may do the trick to allow me to run my own CW graphs but none had the features I required. So i wrote my own. \r\n\r\nBased on [aws-cloudchart](https://github.com/manuskc/aws-cloudchart) I have built a set of tools that will give a much better at-a-glance insight into your AWS EC2, RDS and ELB instances.\r\n\r\nTake a look here: https://github.com/PercussiveRepair/cwgraphs\r\n\r\nThe code should be fairly easy to follow and it uses the older AWS PHP-SDK v 1.62 as it's base interface with the Amazon Cloudwatch API. And all it needs is a set of IAM creds. Feel free to fork and improve.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}